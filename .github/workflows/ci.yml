name: CI

on:
  push:
    branches:
      - "master"
    tags:
      - "*"
  pull_request:
    branches:
      - "master"
  workflow_dispatch:

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Poetry
        run: |
          pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "poetry"

      - name: Install dependencies
        run: |
          poetry install

      - name: isort check
        run: |
          poetry run isort --check src tests docs

      - name: black check
        run: |
          poetry run black --check src tests docs

      - name: mypy check
        run: |
          poetry run mypy src tests docs

      - name: flake8 check
        run: |
          poetry run flake8 src tests docs

      - name: Check twine
        run: |
          poetry build
          poetry run twine check dist/*

  test:
    name: Test
    needs: check
    strategy:
      matrix:
        os: [ubuntu, macos, windows]
      fail-fast: true
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Poetry
        run: |
          pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "poetry"

      - name: Install dependencies
        run: |
          poetry install

      - name: Run tests
        run: |
          poetry run pytest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test
    # Run only on pushing a tag starting with v
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Poetry
        run: |
          pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "poetry"

      - name: Install dependencies
        run: |
          poetry install

      - name: Build
        run: |
          poetry build

      - name: Configure PyPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry config pypi-token.pypi "$PYPI_TOKEN"

      - name: Publish to PyPI
        run: |
          poetry publish
